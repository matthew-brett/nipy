# vim ft=yaml
# Multiple lines can be made a single "virtual line" because of the way that
# Travis munges each line before executing it to print out the exit status.
# It's okay for it to be on multiple physical lines, so long as you remember:
# - There can't be any leading "-"s - All newlines will be removed, so use
# ";"s
sudo: false  # To use travis container infrastructure

addons:
  apt:
    packages:
        - libblas-dev
        - liblapack-dev

language: python

cache:
  directories:
    - $HOME/.cache/pip

env:
    global:
        - DEPENDS="numpy scipy sympy matplotlib nibabel"

python:
    - 2.6
    - 3.3
    - 3.4
    - 3.5

matrix:
  include:
    - python: 2.7
      env:
        - COVERAGE=1
    # Absolute minimum dependencies
    - python: 2.7
      env:
        # Definitive source for these in nipy/info.py
        - DEPENDS="numpy==1.6.0 scipy==0.9.0 sympy==0.7.0 nibabel==1.2.0"
    # Test compiling against external lapack
    - python: 3.4
      env:
        - NIPY_EXTERNAL_LAPACK=1
    # Setup.py install
    - python: 2.7
      env:
        - INTSTALL_TYPE=setup
    - python: 2.7
      env:
        - INSTALL_TYPE=sdist
        - DEPENDS="numpy==1.7.1"  # latest travis scipy built with 1.7.1
    - python: 2.7
      env:
        - INSTALL_TYPE=wheel
        - DEPENDS="numpy==1.7.1"  # latest travis scipy built with 1.7.1
    - python: 2.7
      env:
        - INSTALL_TYPE=requirements
        - DEPENDS=
    # Compile against numpy pre-release
    - python: 2.7
      sudo: required
      env:
        - EXTRA_PIP_FLAGS="--pre"

before_install:
    - source travis-tools/utils.sh
    - travis_before_install
    # numpy pre-release wheel needs ATLAS
    - if [ "$EXTRA_PIP_FLAGS" == "--pre" ]; then
          sudo apt-get install libatlas-base-dev;
      fi
# command to install dependencies
# e.g. pip install -r requirements.txt # --use-mirrors
install:
    - travis_install $INSTALL_TYPE
# command to run tests, e.g. python setup.py test
script:
    # Change into an innocuous directory and find tests from installation
    - pip install nose
    - mkdir for_testing
    - cd for_testing
    - if [ "${COVERAGE}" == "1" ]; then
      cp ../.coveragerc .;
      COVER_ARGS="--with-coverage --cover-package nipy";
      fi
    - python ../tools/nipnost --verbosity=3 $COVER_ARGS nipy
after_success:
    - if [ "${COVERAGE}" == "1" ]; then coveralls; fi
